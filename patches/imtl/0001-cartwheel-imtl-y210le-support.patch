From a4a3aca7f883408b153de4b545f2e88b867d5957 Mon Sep 17 00:00:00 2001
From: "Wesierski, Dawid" <dawid.wesierski@intel.com>
Date: Wed, 29 May 2024 11:44:37 +0200
Subject: [PATCH] cartwheel imtl y210le support

---
 ecosystem/ffmpeg_plugin/mtl_st20p_rx.c | 22 +++++++++++++++++++++-
 ecosystem/ffmpeg_plugin/mtl_st20p_tx.c | 15 ++++++++++++++-
 2 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/ecosystem/ffmpeg_plugin/mtl_st20p_rx.c b/ecosystem/ffmpeg_plugin/mtl_st20p_rx.c
index 7a990e7..e22761d 100644
--- a/ecosystem/ffmpeg_plugin/mtl_st20p_rx.c
+++ b/ecosystem/ffmpeg_plugin/mtl_st20p_rx.c
@@ -18,6 +18,7 @@
  */
 
 #include "mtl_common.h"
+#include <mtl/st_convert_api.h>
 
 typedef struct MtlSt20pDemuxerContext {
   const AVClass* class; /**< Class for private options. */
@@ -95,7 +96,7 @@ static int mtl_st20p_read_header(AVFormatContext* ctx) {
     err(ctx, "%s, frame rate %0.2f is not supported\n", __func__, av_q2d(s->framerate));
     return AVERROR(EINVAL);
   }
-  /* transport_fmt is hardcode now */
+  /* transport_fmt is hardcode now test */
   pix_fmt = s->pixel_format;
   pix_fmt_desc = av_pix_fmt_desc_get(pix_fmt);
   switch (pix_fmt) {
@@ -103,6 +104,10 @@ static int mtl_st20p_read_header(AVFormatContext* ctx) {
       ops_rx.transport_fmt = ST20_FMT_YUV_422_10BIT;
       ops_rx.output_fmt = ST_FRAME_FMT_YUV422PLANAR10LE;
       break;
+    case AV_PIX_FMT_Y210LE:
+      ops_rx.transport_fmt = ST20_FMT_YUV_422_10BIT;
+      ops_rx.output_fmt = ST_FRAME_FMT_Y210;
+      break;
     case AV_PIX_FMT_RGB24:
       ops_rx.transport_fmt = ST20_FMT_RGB_8BIT;
       ops_rx.output_fmt = ST_FRAME_FMT_RGB8;
@@ -197,6 +202,21 @@ static int mtl_st20p_read_packet(AVFormatContext* ctx, AVPacket* pkt) {
     st20p_rx_put_frame(s->rx_handle, frame);
     return ret;
   }
+
+  switch (s->pixel_format) {
+     case AV_PIX_FMT_Y210LE:
+      ret = st20_rfc4175_422be10_to_y210(
+          (struct st20_rfc4175_422_10_pg2_be*)frame, (uint16_t*)pkt->data,
+          s->width, s->height);
+      if (ret != 0) {
+        av_log(ctx, AV_LOG_ERROR,
+              "st20_rfc4175_422be10_to_y210le failed with %d\n", ret);
+        // s->stopped = true;
+        // pthread_mutex_unlock(&(s->read_packet_mutex));
+        return ret;
+        break;
+    }
+  }
   /* todo: zero copy with external frame mode */
   mtl_memcpy(pkt->data, frame->addr[0], ctx->packet_size);
   st20p_rx_put_frame(s->rx_handle, frame);
diff --git a/ecosystem/ffmpeg_plugin/mtl_st20p_tx.c b/ecosystem/ffmpeg_plugin/mtl_st20p_tx.c
index 826bbeb..5b388c3 100644
--- a/ecosystem/ffmpeg_plugin/mtl_st20p_tx.c
+++ b/ecosystem/ffmpeg_plugin/mtl_st20p_tx.c
@@ -18,6 +18,7 @@
  */
 
 #include "mtl_common.h"
+#include <mtl/st_convert_api.h>
 
 typedef struct mtlSt20pMuxerContext {
   const AVClass* class; /**< Class for private options. */
@@ -88,12 +89,16 @@ static int mtl_st20p_write_header(AVFormatContext* ctx) {
 
   s->pixel_format = ctx->streams[0]->codecpar->format;
 
-  /* transport_fmt is hardcode now */
+  /* transport_fmt is hardcode now test */
   switch (s->pixel_format) {
     case AV_PIX_FMT_YUV422P10LE:
       ops_tx.input_fmt = ST_FRAME_FMT_YUV422PLANAR10LE;
       ops_tx.transport_fmt = ST20_FMT_YUV_422_10BIT;
       break;
+    case AV_PIX_FMT_Y210LE:
+      ops_tx.transport_fmt = ST20_FMT_YUV_422_10BIT;
+      ops_tx.input_fmt = ST_FRAME_FMT_Y210;
+      break;
     case AV_PIX_FMT_RGB24:
       ops_tx.input_fmt = ST_FRAME_FMT_RGB8;
       ops_tx.transport_fmt = ST20_FMT_RGB_8BIT;
@@ -145,6 +150,14 @@ static int mtl_st20p_write_packet(AVFormatContext* ctx, AVPacket* pkt) {
     return AVERROR(EIO);
   }
   dbg(ctx, "%s(%d), st20p_tx_get_frame: %p\n", __func__, s->idx, frame);
+
+  switch (s->pixel_format) {
+    case AV_PIX_FMT_Y210LE:
+      st20_y210_to_rfc4175_422be10(
+          (uint16_t*)pkt->data, (struct st20_rfc4175_422_10_pg2_be*)(frame->addr[0]),
+           s->width, s->height);
+      break;
+  }
   /* todo: zero copy with external frame mode */
   mtl_memcpy(frame->addr[0], pkt->data, s->frame_size);
 
-- 
2.34.1

