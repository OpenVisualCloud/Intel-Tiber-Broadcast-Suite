From a4094f906231643869113065e0af729788b793c4 Mon Sep 17 00:00:00 2001
From: Tomasz Szumski <tomasz.szumski@intel.com>
Date: Mon, 26 Aug 2024 11:54:14 +0200
Subject: [PATCH 4/5] filtergraph_async

---
 libavfilter/avfilter.c      | 18 +++++++-
 libavfilter/avfilter.h      | 19 ++++++++
 libavfilter/avfiltergraph.c | 88 ++++++++++++++++++++++++++++++++++++-
 libavfilter/internal.h      |  5 +++
 4 files changed, 127 insertions(+), 3 deletions(-)

diff --git a/libavfilter/avfilter.c b/libavfilter/avfilter.c
index 831871de90..61462db7eb 100644
--- a/libavfilter/avfilter.c
+++ b/libavfilter/avfilter.c
@@ -264,6 +264,7 @@ void ff_avfilter_link_set_in_status(AVFilterLink *link, int status, int64_t pts)
     li->frame_blocked_in = 0;
     filter_unblock(link->dst);
     ff_filter_set_ready(link->dst, 200);
+    //av_log(link->src, AV_LOG_WARNING, "link_set_in_status %s, %d, frames:%ld\n", link->dst->name, link->dst->ready, link->fifo.queued);
 }
 
 /**
@@ -281,6 +282,7 @@ static void link_set_out_status(AVFilterLink *link, int status, int64_t pts)
         update_link_current_pts(li, pts);
     filter_unblock(link->dst);
     ff_filter_set_ready(link->src, 200);
+    //av_log(link->dst, AV_LOG_WARNING, "link_set_out_status %s, %d, frames:%ld\n", link->src->name, link->src->ready, link->fifo.queued);
 }
 
 int avfilter_insert_filter(AVFilterLink *link, AVFilterContext *filt,
@@ -483,6 +485,7 @@ int ff_request_frame(AVFilterLink *link)
     }
     link->frame_wanted_out = 1;
     ff_filter_set_ready(link->src, 100);
+    //av_log(link->dst, AV_LOG_WARNING, "ff_request_frame %s, %d, frames:%ld\n", link->src->name, link->src->ready, link->fifo.queued);
     return 0;
 }
 
@@ -1061,7 +1064,10 @@ int ff_filter_frame(AVFilterLink *link, AVFrame *frame)
         av_frame_free(&frame);
         return ret;
     }
-    ff_filter_set_ready(link->dst, 300);
+    if (link->dst->ready != 150) {
+        ff_filter_set_ready(link->dst, 300);
+    }
+    //av_log(link->src, AV_LOG_WARNING, "ff_filter_frame %s, %d, frames:%ld\n", link->dst->name, link->dst->ready, link->fifo.queued);
     return 0;
 
 error:
@@ -1161,10 +1167,11 @@ static int ff_filter_frame_to_filter(AVFilterLink *link)
     ret = ff_filter_frame_framed(link, frame);
     if (ret < 0 && ret != li->status_out) {
         link_set_out_status(link, ret, AV_NOPTS_VALUE);
-    } else {
+    } else if (!dst->ready) {
         /* Run once again, to see if several frames were available, or if
            the input status has also changed, or any other reason. */
         ff_filter_set_ready(dst, 300);
+        //av_log(link->src, AV_LOG_WARNING, "ff_filter_frame_to_filter %s, %d, frames:%ld\n", link->dst->name, link->dst->ready, link->fifo.queued);
     }
     return ret;
 }
@@ -1200,6 +1207,7 @@ static int forward_status_change(AVFilterContext *filter, FilterLinkInternal *li
             out = 0;
         }
     }
+    //av_log(in->src, AV_LOG_WARNING, "forward_status_change %s, %d, frames:%ld\n", in->dst->name, in->dst->ready, in->fifo.queued);
     ff_filter_set_ready(filter, 200);
     return 0;
 }
@@ -1219,6 +1227,11 @@ static int ff_filter_activate_default(AVFilterContext *filter)
         }
     }
 
+    for (i = 0; i < filter->nb_inputs; i++) {
+        if (filter->inputs[i]->dstpad->flags & AVFILTERPAD_FLAG_ASYNC) {
+            return filter->inputs[i]->dstpad->filter_frame(filter->inputs[i], NULL);
+        }
+    }
     for (i = 0; i < filter->nb_inputs; i++) {
         if (samples_ready(ff_link_internal(filter->inputs[i]),
                           filter->inputs[i]->min_samples)) {
@@ -1575,6 +1588,7 @@ void ff_inlink_request_frame(AVFilterLink *link)
     av_assert1(!li->status_out);
     link->frame_wanted_out = 1;
     ff_filter_set_ready(link->src, 100);
+    //av_log(link->dst, AV_LOG_WARNING, "inlink_request_frame %s, %d, frames:%ld\n", link->src->name, link->src->ready, link->fifo.queued);
 }
 
 void ff_inlink_set_status(AVFilterLink *link, int status)
diff --git a/libavfilter/avfilter.h b/libavfilter/avfilter.h
index a34e61f23c..9e91882bba 100644
--- a/libavfilter/avfilter.h
+++ b/libavfilter/avfilter.h
@@ -36,6 +36,7 @@
  */
 
 #include <stddef.h>
+#include <sys/time.h>
 
 #include "libavutil/attributes.h"
 #include "libavutil/avutil.h"
@@ -860,6 +861,10 @@ typedef struct AVFilterGraph {
     avfilter_execute_func *execute;
 
     char *aresample_swr_opts; ///< swr options to use for the auto-inserted aresample filters, Access ONLY through AVOptions
+    unsigned max_frames_in_flight;
+    unsigned input_policy;
+
+    struct timeval timestamp;
 } AVFilterGraph;
 
 /**
@@ -929,6 +934,20 @@ enum {
     AVFILTER_AUTO_CONVERT_NONE = -1, /**< all automatic conversions disabled */
 };
 
+/**
+ * Set maximum number of frames in flight inside filter complex.
+ *
+ * @param frames  number of frames in light
+ */
+void avfilter_graph_set_max_frames_in_flight(AVFilterGraph *graph, unsigned frames);
+
+/**
+ * Set scheduling policy for input buffers.
+ *
+ * @param policy  input buffer scheduling policy
+ */
+void avfilter_graph_set_input_policy(AVFilterGraph *graph, unsigned policy);
+
 /**
  * Check validity and configure all the links and formats in the graph.
  *
diff --git a/libavfilter/avfiltergraph.c b/libavfilter/avfiltergraph.c
index 8e091d95e0..d3563789ef 100644
--- a/libavfilter/avfiltergraph.c
+++ b/libavfilter/avfiltergraph.c
@@ -161,6 +161,16 @@ void avfilter_graph_set_auto_convert(AVFilterGraph *graph, unsigned flags)
     fffiltergraph(graph)->disable_auto_convert = flags;
 }
 
+void avfilter_graph_set_max_frames_in_flight(AVFilterGraph *graph, unsigned frames)
+{
+    graph->max_frames_in_flight = frames;
+}
+
+void avfilter_graph_set_input_policy(AVFilterGraph *graph, unsigned policy)
+{
+    graph->input_policy = policy;
+}
+
 AVFilterContext *avfilter_graph_alloc_filter(AVFilterGraph *graph,
                                              const AVFilter *filter,
                                              const char *name)
@@ -1422,6 +1432,53 @@ int ff_filter_graph_run_once(AVFilterGraph *graph)
     AVFilterContext *filter;
     unsigned i;
 
+    // request frames from source buffers if a graph can accept more frames in flight
+    int frame_count_out = 0;
+    for (i = 0; i < fffiltergraph(graph)->sink_links_count; i++)
+        if (fffiltergraph(graph)->sink_links[i]->l.frame_count_out > frame_count_out)
+            frame_count_out = fffiltergraph(graph)->sink_links[i]->l.frame_count_out;
+    for (i = 0; i < graph->nb_filters; i++) {
+        filter = graph->filters[i];
+        if ((filter->nb_inputs == 0) && (filter->nb_outputs == 1)) {
+            AVFilterLink* link = filter->outputs[0];
+            if (!link->frame_wanted_out && !ff_link_internal(link)->fifo.queued && (link->frame_count_in < frame_count_out + graph->max_frames_in_flight)) {
+                //av_log(filter, AV_LOG_WARNING, "%s request frame:%d\n", filter->name, frame_count_out);
+                ff_request_frame(link);
+            }
+        }
+    }
+
+    // bump async filters priority frame-level parallelism used
+    if (graph->max_frames_in_flight)
+        for (i = 0; i < graph->nb_filters; i++) {
+            filter = graph->filters[i];
+            if (filter->ready < 100)
+                filter->ready++;
+        }
+
+    // for (i = 0; i < graph->nb_filters; i++) {
+    //     filter = graph->filters[i];
+    //     int log = 0, logIn = 0, logOut = 0;
+    //     if (filter->ready)
+    //         log = 1;
+    //     for (int j = 0; j < filter->nb_inputs; j++)
+    //         if (filter->inputs[j]->fifo.queued || filter->inputs[j]->frame_wanted_out || filter->inputs[j]->frame_blocked_in)
+    //             logIn = 1;
+    //     for (int j = 0; j < filter->nb_outputs; j++)
+    //         if (filter->outputs[j]->fifo.queued || filter->outputs[j]->frame_wanted_out || filter->outputs[j]->frame_blocked_in)
+    //             logOut = 1;
+    //     if (log || logIn || logOut) {
+    //         av_log(graph, AV_LOG_WARNING, "%s ready:%d ", filter->name, filter->ready);
+    //         for (int j = 0; j < filter->nb_inputs; j++)
+    //             if (filter->inputs[j]->fifo.queued || filter->inputs[j]->frame_wanted_out || filter->inputs[j]->frame_blocked_in)
+    //                 av_log(graph, AV_LOG_WARNING, "i%d=<%ld:%ld%s%s> ", j, filter->inputs[j]->frame_count_out, filter->inputs[j]->fifo.queued, filter->inputs[j]->frame_wanted_out ? "w" : "", filter->inputs[j]->frame_blocked_in ? "b" : "");
+    //         for (int j = 0; j < filter->nb_outputs; j++)
+    //             if (filter->outputs[j]->fifo.queued || filter->outputs[j]->frame_wanted_out || filter->outputs[j]->frame_blocked_in)
+    //                 av_log(graph, AV_LOG_WARNING, "o%d=<%ld:%ld%s%s> ", j, filter->outputs[j]->frame_count_out, filter->outputs[j]->fifo.queued, filter->outputs[j]->frame_wanted_out ? "w" : "", filter->outputs[j]->frame_blocked_in ? "b" : "");
+    //         av_log(graph, AV_LOG_WARNING, "\n");
+    //     }
+    // }
+
     av_assert0(graph->nb_filters);
     filter = graph->filters[0];
     for (i = 1; i < graph->nb_filters; i++)
@@ -1429,5 +1486,34 @@ int ff_filter_graph_run_once(AVFilterGraph *graph)
             filter = graph->filters[i];
     if (!filter->ready)
         return AVERROR(EAGAIN);
-    return ff_filter_activate(filter);
+
+    if ((graph->max_frames_in_flight) && (filter->ready < 100)) {
+        return AVERROR(EAGAIN);
+    }
+
+    // int readyPre = filter->ready;
+    // struct timeval start, end;
+
+    // gettimeofday(&start, 0);
+    int ret = ff_filter_activate(filter);
+    // gettimeofday(&end, 0);
+
+    // long gap, duration, s, us;
+    // s = start.tv_sec - graph->timestamp.tv_sec;
+    // us = start.tv_usec - graph->timestamp.tv_usec;
+    // gap = (s*1000000 + us);
+    // s = end.tv_sec - start.tv_sec;
+    // us = end.tv_usec - start.tv_usec;
+    // duration = (s*1000000 + us);
+    // graph->timestamp.tv_sec = end.tv_sec;
+    // graph->timestamp.tv_usec = end.tv_usec;
+
+    // av_log(graph, AV_LOG_WARNING, "ACTIVATE %s, ready-pre: %d, ready-post: %d, ret: %d ", filter->name, readyPre, filter->ready, ret);
+    // for (int j = 0; j < filter->nb_inputs; j++)
+    //     av_log(graph, AV_LOG_WARNING, "i%d=<%ld:%ld%s%s> ", j, filter->inputs[j]->frame_count_out, filter->inputs[j]->fifo.queued, filter->inputs[j]->frame_wanted_out ? "w" : "", filter->inputs[j]->frame_blocked_in ? "b" : "");
+    // for (int j = 0; j < filter->nb_outputs; j++)
+    //     av_log(graph, AV_LOG_WARNING, "o%d=<%ld:%ld%s%s> ", j, filter->outputs[j]->frame_count_out, filter->outputs[j]->fifo.queued, filter->outputs[j]->frame_wanted_out ? "w" : "", filter->outputs[j]->frame_blocked_in ? "b" : "");
+    // av_log(graph, AV_LOG_WARNING, "] %ld ] %ld:%ld ] %ld\n", gap, start.tv_sec, start.tv_usec, duration);
+
+    return ret;
 }
diff --git a/libavfilter/internal.h b/libavfilter/internal.h
index 000f94cb16..95a64a09cc 100644
--- a/libavfilter/internal.h
+++ b/libavfilter/internal.h
@@ -56,6 +56,11 @@ struct AVFilterPad {
      */
 #define AVFILTERPAD_FLAG_FREE_NAME                       (1 << 1)
 
+    /**
+     * The filter executes asynchronous operation.
+     */
+#define AVFILTERPAD_FLAG_ASYNC                           (1 << 2)
+
     /**
      * A combination of AVFILTERPAD_FLAG_* flags.
      */
-- 
2.45.1.windows.1

