From 66386a5cbf993c485116fb1b1f2d6cc41e5e6fc6 Mon Sep 17 00:00:00 2001
From: Tomasz Szumski <tomasz.szumski@intel.com>
Date: Mon, 26 Aug 2024 11:53:24 +0200
Subject: [PATCH 2/5] qsv_aligned_malloc

---
 libavutil/mem.c | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/libavutil/mem.c b/libavutil/mem.c
index 62163b4cb3..2b87c1f62e 100644
--- a/libavutil/mem.c
+++ b/libavutil/mem.c
@@ -96,21 +96,26 @@ static int size_mult(size_t a, size_t b, size_t *r)
 void *av_malloc(size_t size)
 {
     void *ptr = NULL;
+    size_t alignment = ALIGN;
 
     if (size > atomic_load_explicit(&max_alloc_size, memory_order_relaxed))
         return NULL;
 
+#if CONFIG_QSV
+    if ((size > 1024*1024) & (alignment < 4096))
+        alignment = 4096;
+#endif
 #if HAVE_POSIX_MEMALIGN
     if (size) //OS X on SDK 10.6 has a broken posix_memalign implementation
-    if (posix_memalign(&ptr, ALIGN, size))
+    if (posix_memalign(&ptr, alignment, size))
         ptr = NULL;
 #elif HAVE_ALIGNED_MALLOC
-    ptr = _aligned_malloc(size, ALIGN);
+    ptr = _aligned_malloc(size, alignment);
 #elif HAVE_MEMALIGN
 #ifndef __DJGPP__
-    ptr = memalign(ALIGN, size);
+    ptr = memalign(alignment, size);
 #else
-    ptr = memalign(size, ALIGN);
+    ptr = memalign(size, alignment);
 #endif
     /* Why 64?
      * Indeed, we should align it:
-- 
2.45.1.windows.1

