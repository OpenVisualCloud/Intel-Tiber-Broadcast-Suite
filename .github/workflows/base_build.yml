name: Base Build

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ "main" ]

permissions:
  contents: read
jobs:
  build:
    name: "Binaries build for Intel® Tiber™ Broadcast Suite"
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    permissions:
      contents: read
    steps:
    - name: "OS-Configuration: Preparation: Harden Runner"
      uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
      with:
        egress-policy: audit

    - name: "Preparation: Repository Checkout"
      uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

    # - name: "Build: gRPC and nmos"
    #   working-directory: "${{ github.workspace }}/src"
    #   run: |
    #     sudo rm /usr/local/bin/cmake
    #     sudo apt-get install -y git cmake=3.22* libboost-all-dev libcpprest-dev libavahi-client-dev libavahi-compat-libdnssd-dev libgtest-dev
    #     sudo ./build_local.sh -ut
    # - name: "grpc unit tests" 
    #   working-directory: "${{ github.workspace }}/src/gRPC/unit_test/build"
    #   run: |
    #     ./FFmpegPipelineGeneratorTests
    #     ./FFmpegWrapperServiceTests

    # - name: "nmos unit tests"
    #   working-directory: "${{ github.workspace }}/src/nmos/nmos-node/build/unit_tests"
    #   run: |
    #     ./NmosNodeTests
    # - name: 'upload gRpc binaries'
    #   uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
    #   with:
    #     name: grpc-nmos-bin
    #     path: | 
    #       '${{ github.workspace }}/src/gRPC/build/*'
    #       '${{ github.workspace }}/src/nmos/nmos-node/build/*'
    #       '${{ github.workspace }}/src/nmos/nmos-cpp/Development/build/*'

    # - name: "Build: launcher"
    #   working-directory: "${{ github.workspace }}/launcher"
    #   run: 
    #     go build -a -o manager cmd/main.go

    # - name: 'upload launcher binaries'
    #   uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
    #   with:
    #     name: launcher-bin
    #     path: '${{ github.workspace }}/launcher/manager'

    # - name: "Build: ffmpeg"
    #   working-directory: "${{ github.workspace }}"
    #   run: |
    #     source versions.env
    #     mkdir ffmpeg
    #     curl -Lf https://github.com/ffmpeg/ffmpeg/archive/${FFMPEG_COMMIT_ID}.tar.gz
    #     tar -zx --strip-components=1 -C ffmpeg
    #     cd ffmpeg

    # - name: "Build: ffmpeg with patches"
    #   working-directory: "${{ github.workspace }}"
    #   run: |
    #       source versions.env
    #       mkdir ffmpeg
    #       curl -Lf https://github.com/ffmpeg/ffmpeg/archive/${FFMPEG_COMMIT_ID}.tar.gz
    #       tar -zx --strip-components=1 -C ffmpeg
    #       cd ffmpeg
      
    # - name: 'upload ffmpeg '
    #   uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
    #   with:
    #     name: launcher-bin
    #     path: '${{ github.workspace }}/launcher/manager'     


    - name: "Build: onevpl"
      working-directory: "${{ github.workspace }}"
      run: |
        source versions.env
        mkdir onevpl
        curl -Ls -o onevpl.tar.gz https://github.com/oneapi-src/oneVPL-intel-gpu/archive/refs/tags/intel-onevpl-23.3.4.tar.gz
        tar -zx --strip-components=1 -C onevpl.tar.gz
        cd onevpl
        mkdir build && cd build
        cmake \
             -DCMAKE_INSTALL_PREFIX=/usr \
             -DCMAKE_INSTALL_LIBDIR=/usr/lib/x86_64-linux-gnu ..
        make -j$(nproc)
        ls .

    - name: "Build: onevpl"
      working-directory: "${{ github.workspace }}/onevpl"
      run: |
          source versions.env
          git apply "${{ github.workspace }}/patches/onevpl/*.patch"
          mkdir build_path && cd build_patch
          cmake \
               -DCMAKE_INSTALL_PREFIX=/usr \
               -DCMAKE_INSTALL_LIBDIR=/usr/lib/x86_64-linux-gnu ..
          make -j$(nproc)
          ls .


#         RUN \
#   echo "**** DOWNLOAD and PATCH ONEVPL ****" && \
#   curl -Lf \
#     https://github.com/oneapi-src/oneVPL-intel-gpu/archive/refs/tags/intel-onevpl-${ONEVPL}.tar.gz | \
#     tar -zx --strip-components=1 -C /tmp/onevpl && \
#   git -C /tmp/onevpl apply /tmp/patches/onevpl/*.patch

# RUN \
#   echo "**** BUILD ONEVPL ****" && \
#   cmake \
#     -DCMAKE_INSTALL_PREFIX=/usr \
#     -DCMAKE_INSTALL_LIBDIR=/usr/lib/x86_64-linux-gnu .. && \
#   make -j${nproc} && \
#   make install -j${nproc} && \
#   strip -d /usr/lib/x86_64-linux-gnu/libmfx-gen.so