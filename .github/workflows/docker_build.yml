name: Docker Build

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run scans on'
        default: 'main'
        type: string
  workflow_call:
  pull_request:
  push:
    branches: [ "main" ]


permissions:
  contents: read

env:
  BUILD_TYPE: "CI"
  LOCAL_INSTALL: "false"
  CMAKE_BUILD_TYPE: "Release"
  DOCKER_REGISTRY: "ghcr.io"
  DOCKER_LOGIN: "${{ github.repository == 'openvisualcloud/intel-tiber-broadcast-suite' }}"
  DOCKER_REGISTRY_NAMESPACE: 'openvisualcloud/intel-tiber-broadcast-suite'
  DOCKER_IMAGE_BASE: "ghcr.io/openvisualcloud/intel-tiber-broadcast-suite"
  DOCKER_IMAGE_NAME: "tiber-broadcast-suite"
  DOCKER_IMAGE_TAG: "${{ inputs.branch || github.sha || github.ref }}"
  DEBIAN_FRONTEND: "noninteractive"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  docker:
    name: "Docker image build for Intel® Tiber™ repository"
    runs-on: ["self-hosted", "docker", "Linux"]
    timeout-minutes: 180
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        config:
          - IMAGE_NAME: "tiber-broadcast-suite"
            IMAGE_PATH: "./docker/app/Dockerfile"
            BUILD_SCOPE: "./"
            BUILD_STAGE: "final-stage"
          - IMAGE_NAME: "mtl-manager"
            IMAGE_PATH: "./docker/app/Dockerfile"
            BUILD_SCOPE: "./"
            BUILD_STAGE: "manager-stage"
          - IMAGE_NAME: "tiber-broadcast-suite-nmos-node"
            IMAGE_PATH: "./docker/nmos/Dockerfile"
            BUILD_SCOPE: "./"
            BUILD_STAGE: "final-stage"
          - IMAGE_NAME: "bcs-pod-launcher"
            IMAGE_PATH: "./launcher/Dockerfile"
            BUILD_SCOPE: "./launcher"
            BUILD_STAGE: ""
    steps:
    - name: "OS-Configuration: Harden Runner"
      uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
      with:
        egress-policy: audit

    - name: "OS-Configuration: Expose GitHub Runtime to bash and docker"
      uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124 # v3.1.0

    - name: "OS-Configuration: Docker with Buildx Toolkit set up"
      uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # v3.4.0
      with:
        buildkitd-flags: "--debug --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host"
        platforms: "linux/amd64"
        driver-opts: memory=14Gib,memory-swap=25Gib,env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000,env.BUILDKIT_STEP_LOG_MAX_SPEED=10000000

    - name: "Docker: Login to ghcr.io Container Registry"
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      if: ${{ env.DOCKER_LOGIN == 'true' }}
      continue-on-error: true
      with:
        registry: "${{ env.DOCKER_REGISTRY }}"
        username: "${{ secrets.DOCKER_REGISTRY_LOGIN || github.repository_owner }}"
        password: "${{ secrets.DOCKER_REGISTRY_PASSKEY || secrets.GITHUB_TOKEN }}"

    - name: "${{ matrix.config.IMAGE_NAME }}: Code-sync GitHub ref and Docker Image Tag"
      id: set_ref_and_tag
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          TEMP_REF="${{ github.event.release.tag_name }}"
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          TEMP_REF="${{ github.ref }}"
        else
          TEMP_REF="${{ inputs.branch || github.sha }}"
        fi
        # Sanitize the tag to be Docker image tag safe
        DOCKER_IMAGE_TAG="$(echo "${TEMP_REF}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g' | sed 's/^-*//;s/-*$//')"
        echo "TEMP_REF=${TEMP_REF}" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}" >> $GITHUB_ENV

    - name: "${{ matrix.config.IMAGE_NAME }}: Code-sync GitHub git checkout push"
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        ref: "${{ steps.set_ref_and_tag.outputs.TEMP_REF }}"

    - name: "${{ matrix.config.IMAGE_NAME }}: Build and push bcs-pod-launcher image"
      run: ./build.sh
      env:
        IMAGE_NAME: "${{ matrix.config.IMAGE_NAME }}"
        IMAGE_PATH: "${{ matrix.config.IMAGE_PATH }}"
        BUILD_SCOPE: "${{ matrix.config.BUILD_SCOPE }}"
        BUILD_STAGE: "${{ matrix.config.BUILD_STAGE }}"
