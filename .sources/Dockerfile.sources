# syntax=docker/dockerfile:1

#
# SPDX-License-Identifier: BSD-3-Clause
# Copyright(©) 2024 Intel Corporation
# Intel® Tiber™ Broadcast Suite
#
# build stage

FROM ubuntu:24.04 AS build

ARG DEBIAN_FRONTEND="noninteractive"

COPY versions.env /root/

SHELL ["/bin/bash", "-ex", "-o", "pipefail", "-c"]

# Install dependencies
RUN \
  apt-get update && \
  apt-get install --no-install-recommends \
    ca-certificates -y \
    wget && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

COPY /patches /root/patches
WORKDIR /root
RUN \
  source /root/versions.env && \
  export WGET="wget --progress=dot:giga" && \
  echo "**** DOWNLOAD ONEVPL ****" && \
  $WGET  https://github.com/oneapi-src/oneVPL-intel-gpu/archive/refs/tags/intel-onevpl-${ONEVPL}.tar.gz -O oneVPL-intel-gpu.tar.gz && \
  echo "**** DOWNLOAD VMAF ****" && \
  $WGET  https://github.com/Netflix/vmaf/archive/refs/tags/v${LIBVMAF}.tar.gz -O vmaf.tar.gz && \
  echo "**** DOWNLOAD SVT-AV1 ****" && \
  $WGET  https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v${SVTAV1}/SVT-AV1-v${SVTAV1}.tar.gz -O SVT-AV1.tar.gz && \
  echo "**** DOWNLOAD VULKAN HEADERS ****" && \
  $WGET  https://github.com/KhronosGroup/Vulkan-Headers/archive/refs/tags/${VULKANSDK}.tar.gz -O Vulkan-Headers.tar.gz && \
  echo "**** DOWNLOAD MTL ****" && \
  $WGET  https://github.com/OpenVisualCloud/Media-Transport-Library/archive/refs/tags/${MTL_VER}.tar.gz -O Media-Transport-Library.tar.gz && \
  echo "**** DOWNLOAD DPDK ****" && \
  $WGET  https://github.com/DPDK/dpdk/archive/refs/tags/v${DPDK_VER}.tar.gz -O dpdk.tar.gz && \
  echo "**** DOWNLOAD XDP-TOOLS ****" && \
  $WGET  https://github.com/xdp-project/xdp-tools/archive/${XDP_VER}.tar.gz -O xdp-tools.tar.gz && \
  $WGET  https://github.com/libbpf/libbpf/archive/${BPF_VER}.tar.gz -O libbpf.tar.gz && \
  echo "**** DOWNLOAD JPEG-XS ****" && \
  $WGET  https://github.com/OpenVisualCloud/SVT-JPEG-XS/archive/${JPEG_XS_COMMIT_ID}.tar.gz -O SVT-JPEG-XS.tar.gz&& \
  echo "**** DOWNLOAD FFMPEG ****" && \
  $WGET  https://github.com/ffmpeg/ffmpeg/archive/${FFMPEG_COMMIT_ID}.tar.gz -O ffmpeg.tar.gz && \
  echo "**** DOWNLOAD CARTWHEEL PATCHES ****" && \
  $WGET  https://github.com/intel/cartwheel-ffmpeg/archive/${CARTWHEEL_COMMIT_ID}.tar.gz -O cartwheel-ffmpeg.tar.gz && \
  echo "**** DOWNLOAD VIDEO SUPER RESOLUTION ****" && \
  $WGET  https://github.com/OpenVisualCloud/Video-Super-Resolution-Library/archive/refs/tags/${VSR}.tar.gz -O Video-Super-Resolution.tar.gz && \
  echo "**** DOWNLOAD MEDIA COMMUNICATIONS MESH ****" && \
  $WGET  https://github.com/OpenVisualCloud/Media-Communications-Mesh/archive/refs/tags/${MCM_VER}.tar.gz -O Media-Communications-Mesh.tar.gz && \
  echo "**** DOWNLOAD FFNVCODED HEADERS ****" && \
  $WGET  https://github.com/FFmpeg/nv-codec-headers/archive/${FFNVCODED_VER}.tar.gz -O nv-codec-headers.tar.gz && \
  echo "**** DOWNLOAD IPP ****" && \
  export no_proxy="" && wget --progress=dot:giga https://registrationcenter-download.intel.com/akdlm/IRC_NAS/046b1402-c5b8-4753-9500-33ffb665123f/l_ipp_oneapi_p_2021.10.1.16_offline.sh

RUN \
  groupadd -g 2110 vfio && \
  groupadd -g 1001 mtl && \
  groupadd -g 1002 mcm && \
  useradd -m -s /bin/bash -G vfio,mtl,mcm -u 1003 tiber && \
  usermod -aG sudo tiber

USER "tiber"
HEALTHCHECK --interval=30s --timeout=5s CMD ps aux | grep "bash" || exit 1
ENTRYPOINT ["/bin/bash"]
